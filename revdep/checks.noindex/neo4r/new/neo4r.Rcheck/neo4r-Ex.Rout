
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "neo4r"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('neo4r')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("neo4j_api")
> ### * neo4j_api
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: neo4j_api
> ### Title: A Neo4J Connexion
> ### Aliases: neo4j_api
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D con <- neo4j_api$new(url = "http://localhost:7474", user = "neo4j", password = "password")
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("read_cypher")
> ### * read_cypher
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_cypher
> ### Title: Read a cypher file
> ### Aliases: read_cypher
> 
> ### ** Examples
> 
> ## Not run: 
> ##D read_cypher("random/create.cypher")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("send_cypher")
> ### * send_cypher
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: send_cypher
> ### Title: Send a cypher file to be executed
> ### Aliases: send_cypher
> 
> ### ** Examples
> 
> ## Not run: 
> ##D send_cypher("random/create.cypher")
> ##D path <- "data-raw/constraints.cypher"
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("vec_to_cypher")
> ### * vec_to_cypher
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vec_to_cypher
> ### Title: Turn a named vector into a cypher list
> ### Aliases: vec_to_cypher vec_to_cypher_with_var
> 
> ### ** Examples
> 
> 
> vec_to_cypher(iris[1, 1:3], "Species")
[1] "(:`Species` {`Sepal.Length`: '5.1', `Sepal.Width`: '3.5', `Petal.Length`: '1.4'})"
> vec_to_cypher_with_var(iris[1, 1:3], "Species", a)
[1] "(a:`Species` {`Sepal.Length`: '5.1', `Sepal.Width`: '3.5', `Petal.Length`: '1.4'})"
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.421 0.027 0.45 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
